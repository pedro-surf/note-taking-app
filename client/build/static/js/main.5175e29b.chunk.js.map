{"version":3,"sources":["state/index.js","state/todoData.js","state/authData.js","components/Todo.jsx","components/NewTodoForm.jsx","components/PaginationComponent.jsx","pages/HomePage.jsx","pages/IdeaPage.jsx","state/reducers/todoDataReducer.js","state/reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","initialGlobalState","todoData","todos","count","authData","loggedIn","userId","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","CardWrapper","styled","div","isTodoPage","CompleteInput","Input","CompleteLabel","Label","TodoTitle","h3","completed","TodoBody","p","Todo","title","body","id","index","React","useState","loading","setLoading","dispatch","history","useHistory","toggleCompleted","a","fetch","method","JSON","stringify","headers","then","r","json","response","type","todo","sessionStorage","setItem","displayTodoTitle","extended","renderIndex","titleRest","length","slice","toUpperCase","onClick","push","FormGroup","name","checked","disabled","onChange","htmlFor","to","Badge","color","Spinner","animation","StyledButton","Button","NewTodoForm","formSearch","setFormSearch","popoverOpen","setPopoverOpen","createTodo","Row","className","Col","e","target","placeholder","Popover","placement","isOpen","toggle","PopoverHeader","PaginationComponent","next","prev","currentPage","Pagination","style","justifyContent","marginTop","aria-label","PaginationItem","PaginationLink","previous","TodosSection","section","HomePage","setCurrentPage","useEffect","console","log","res","data","forEach","el","fetchData","offset","Container","Fade","timeout","onMouseEnter","onMouseOut","Math","ceil","alert","map","key","ContentWrapper","IdeaPage","match","currentTodo","setCurrentTodo","find","toString","params","titleAndCompleted","getItem","split","xs","action","produce","draft","filter","todoDataReducer","App","mainReducer","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4XAKaA,EAAeC,0BAEfC,EAAqB,CAChCC,SCRa,CACbC,MAAO,GACPC,MAAO,GDOPC,SETa,CACXC,UAAU,EACVC,OAAQ,OFUCC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OAC3B,kBAACZ,EAAaa,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAC/CC,IAIQI,EAAgB,kBAAMC,qBAAWjB,I,2xBGZ9C,IAAMkB,EAAcC,IAAOC,IAAV,KAIb,qBAAGC,YACH,uDAaEC,EAAgBH,YAAOI,IAAPJ,CAAH,KAObK,EAAgBL,YAAOM,IAAPN,CAAH,KAObO,EAAYP,IAAOQ,GAAV,KAEX,qBAAGC,WAAyB,oCAM1BC,EAAWV,IAAOW,EAAV,KAyGCC,EArGF,SAAC,GAA+D,IAAD,IAA5DV,kBAA4D,SAAxCW,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,GAAIN,EAAuB,EAAvBA,UAAWO,EAAY,EAAZA,MAAY,EAC5CC,IAAMC,UAAS,GAD6B,mBACnEC,EADmE,KAC1DC,EAD0D,OAErDvB,IAAZwB,EAFiE,oBAGtEC,EAAUC,cAERC,EAAe,uCAAG,WAAOT,EAAIF,EAAOJ,GAAlB,eAAAgB,EAAA,6DACtBL,GAAW,GADW,SAECM,MAAM,SAAU,CACrCC,OAAQ,MACRb,KAAMc,KAAKC,UAAU,CAAEd,KAAIF,QAAOJ,YAAWpB,OAAQ,IACrDyC,QAAS,CACP,eAAgB,qCAEjBC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UARK,OAEhBC,EAFgB,OAStBb,EAAS,CACPc,KAAM,YACNC,KAAMF,EAASE,OAEjBC,eAAeC,QAAQvB,EAAIF,EAAQ,KAAOJ,GAC1CW,GAAW,GAdW,2CAAH,0DAiBfmB,EAAmB,SAACC,GACxB,IAAK3B,EACH,MAAO,eAET,GAAI2B,EACF,OAAO3B,EAET,IAAI4B,EAAc,GACdzB,IAAUd,IACZuC,GAAezB,EAAQ,EAAI,MAE7B,IAAI0B,EAAY,GAMhB,OALI7B,EAAM8B,OAAS,KAAOzC,EACxBwC,GAAa7B,EAAM+B,MAAM,EAAG,IAAM,MAElCF,EAAY7B,EAAM+B,MAAM,GAEnBH,EAAc5B,EAAM+B,MAAM,EAAG,GAAGC,cAAgBH,GAgBzD,OACE,kBAAC3C,EAAD,CAAaG,WAAYA,GACvB,kBAACK,EAAD,CACEuC,QAAS,kBAAMxB,EAAQyB,KAAR,iBAAuBhC,KACtCN,UAAWA,GAEV8B,KAEH,kBAAC7B,EAAD,CAAUoC,QAAS,kBAAMxB,EAAQyB,KAAR,iBAAuBhC,MApB7CD,EAGDZ,EACKY,EAELA,EAAK6B,OAAS,GACT7B,EAAK8B,MAAM,EAAG,GAAK9B,EAAK8B,MAAM,EAAG,IAAM,MAEzC9B,EAREyB,GAAiB,IAsBxB,6BACE,kBAACS,EAAA,EAAD,KACE,kBAAC7C,EAAD,CACEY,GAAG,oBACHkC,KAAK,oBACLd,KAAK,WACLe,QAASzC,EACT0C,SAAUhC,EACViC,SAAU,kBAAM5B,EAAgBT,EAAIF,EAAOJ,MAE7C,kBAACJ,EAAD,CACEyC,QAAS,kBAAMtB,EAAgBT,EAAIF,EAAOJ,IAC1C4C,QAAQ,qBAFV,cAQJ,6BACE,kBAAC,IAAD,CAAMC,GAAE,iBAAYvC,IAClB,kBAACwC,EAAA,EAAD,CAAOC,MAAM,WAAb,OAA4BzC,KAGhC,6BACGI,GACC,6BACE,kBAACsC,EAAA,EAAD,CAASC,UAAU,SACnB,6C,+KChIZ,IAAMC,EAAe3D,YAAO4D,IAAP5D,CAAH,KAiGH6D,EA1FK,WAClB,IADwB,EAMY5C,IAAMC,SALjB,CACvBL,MAAO,WACPC,KAAM,0CACNzB,OAAQ,IAJc,mBAMjByE,EANiB,KAMLC,EANK,OAOM9C,IAAMC,UAAS,GAPrB,mBAOjBC,EAPiB,KAORC,EAPQ,OAQcH,IAAMC,UAAS,GAR7B,mBAQjB8C,EARiB,KAQJC,EARI,OAUHpE,IAAZwB,EAVe,oBAYlB6C,EAAU,uCAAG,gCAAAzC,EAAA,yDACTZ,EAAgBiD,EAAhBjD,MAAOC,EAASgD,EAAThD,KACVD,EAFY,yCAGRoD,GAAe,IAHP,cAKjB7C,GAAW,GALM,SAMMM,MAAM,SAAU,CACrCC,OAAQ,OACRG,QAAS,CACP,eAAgB,mCAElBhB,KAAMc,KAAKC,UAAU,CAAEhB,QAAOC,OAAMzB,OAAQ,MAC3C0C,MAAK,SAACC,GAAD,OAAOA,EAAEC,UAZA,QAMXC,EANW,QAaJE,OACXf,EAAS,CACPc,KAAM,UACNC,KAAMF,EAASE,OAEjBC,eAAeC,QAAQJ,EAASE,KAAKrB,GAAIF,EAAQ,WAEnDO,GAAW,GApBM,2CAAH,qDAuBhB,OACE,6BACE,kBAAC+C,EAAA,EAAD,CAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,KACE,kBAAC/D,EAAA,EAAD,CAAO+C,QAAQ,SAAf,SACA,kBAACjD,EAAA,EAAD,CACET,MAAOmE,EAAWjD,MAClBuC,SAAU,SAACkB,GAAD,OACRP,EAAc,2BAAKD,GAAN,IAAkBjD,MAAOyD,EAAEC,OAAO5E,UAEjDsD,KAAK,QACLlC,GAAG,YAIT,kBAACiC,EAAA,EAAD,KACE,kBAAC1C,EAAA,EAAD,CAAO+C,QAAQ,SAAf,SACA,kBAACjD,EAAA,EAAD,CACE+B,KAAK,WACLxC,MAAOmE,EAAWhD,KAClBsC,SAAU,SAACkB,GAAD,OACRP,EAAc,2BAAKD,GAAN,IAAkBhD,KAAMwD,EAAEC,OAAO5E,UAEhDsD,KAAK,QACLlC,GAAG,QACHyD,YAAY,0EAGhB,kBAACb,EAAD,CACEb,QAASoB,EACTf,SAAUhC,EACVJ,GAAG,WACHoB,KAAK,UAJP,YAQChB,GACC,6BACE,kBAACsC,EAAA,EAAD,OAGHO,GACC,kBAACS,EAAA,EAAD,CACEC,UAAU,SACVC,OAAQX,EACRO,OAAO,WACPK,OAAQ,kBAAMX,GAAgBD,KAE9B,kBAACa,EAAA,EAAD,qC,2BClFKC,EApBa,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACzC,OACE,6BACA,kBAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,eAAgB,SAAUC,UAAW,QAC9CC,aAAW,mBAEX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAgBC,UAAQ,EAAC3C,QAAS,kBAAMkC,QAG1C,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAgBT,MAAI,EAACjC,QAAS,kBAAMiC,SAGxC,qCAAWE,EAAc,K,mLCR7B,IAAMS,EAAe1F,IAAO2F,QAAV,KAwHHC,MAhHf,WAAqB,IAAD,EACoB3E,IAAMC,SAAS,GADnC,mBACX+D,EADW,KACEY,EADF,OAEoB5E,IAAMC,UAAS,GAFnC,mBAEX8C,EAFW,KAEEC,EAFF,OASdpE,IATc,0BAMdb,SAAYC,EANE,EAMFA,MAAOC,EANL,EAMKA,MAErBmC,EARgB,KAalByE,qBAAU,WAeH5G,GAdU,uCAAG,8BAAAuC,EAAA,6DAChBsE,QAAQC,IAAI,gCADI,SAEGtE,MAAM,UAAUK,MAAK,SAACkE,GAAD,OAASA,EAAIhE,UAFrC,QAEViE,EAFU,SAGJA,EAAKjH,OAASiH,EAAKjH,MAAM0D,UAC7B1D,EAAQiH,EAAKjH,MAAM2D,MAAM,EAAG,IAC5BuD,SAAQ,SAACC,GAAD,OACZ/D,eAAeC,QAAQ8D,EAAGrF,GAA1B,UAAiCqF,EAAGvF,MAApC,YAA6CuF,EAAG3F,eAElDY,EAAS,CACPc,KAAM,WACNlD,WAVY,2CAAH,oDAeboH,KAED,CAACnH,EAAOmC,IAEX,IAUIiF,EAhCe,EAgCNrB,EACb,OACE,kBAACsB,EAAA,EAAD,CAAWnC,UAAU,OACnB,kBAACoC,EAAA,EAAD,CAAMC,QAAS,KACb,wBAAIrC,UAAU,QACZ,kBAACb,EAAA,EAAD,CAAOC,MAAM,WAAb,oBAEF,kBAACD,EAAA,EAAD,CAAOa,UAAU,OAAOZ,MAAM,aAA9B,wCAGA,kBAACD,EAAA,EAAD,CACEmD,aAAc,kBAAMzC,GAAe,IACnC0C,WAAY,kBAAM1C,GAAe,IACjClD,GAAG,WACHyC,MAAM,QAELtE,GAEF8E,GACC,kBAACS,EAAA,EAAD,CACEC,UAAU,SACVC,OAAQX,EACRO,OAAO,WACPK,OAAQ,kBAAMX,GAAgBD,KAE9B,kBAACa,EAAA,EAAD,KACG3F,EADH,gDAMN,kBAACsH,EAAA,EAAD,CAAMC,QAAS,KACZ,IACD,kBAAC,EAAD,OAGDvH,EApEc,GAqEb,kBAAC,EAAD,CACE6F,KAAM,kBA/CZE,EAAc,GAAK2B,KAAKC,KAAK3H,EAvBZ,GAwBb4H,MAAM,0BACNjB,EAAeZ,EAAc,IA8C3BD,KAAM,kBA3CI,IAAhBC,EACI6B,MAAM,2BACNjB,EAAeZ,EAAc,IA0C3BA,aAAcA,IAGlB,kBAACuB,EAAA,EAAD,CAAMC,QAAS,MACb,kBAACf,EAAD,KACGzG,EACCA,EAAM8H,KACJ,WAAiC/F,GAAjC,IAAGD,EAAH,EAAGA,GAAIF,EAAP,EAAOA,MAAOJ,EAAd,EAAcA,UAAWK,EAAzB,EAAyBA,KAAzB,OACEE,GAASsF,GACTtF,EAAQsF,EAjFH,GAkFH,kBAAC,EAAD,CACEU,IAAKhG,EACLD,GAAIA,EACJF,MAAOA,EACPC,KAAMA,EACNL,UAAWA,EACXO,MAAOA,OAKf,4C,+JCnHZ,IAAMiG,GAAiBjH,IAAOC,IAAV,KAqDLiH,GA9CE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAK1BtH,IAFYZ,EAHc,oBAG1BD,SAAYC,MAHc,EAOQiC,mBAAS,MAPjB,mBAOvBkG,EAPuB,KAOVC,EAPU,KAyB9B,OAhBAvB,qBAAU,WAIR,GAHI7G,GAASA,EAAM0D,QACjB0E,EAAepI,EAAMqI,MAAK,qBAAGvG,GAAYwG,aAAeJ,EAAMK,OAAOzG,QAElE9B,IAAUA,EAAM0D,OAAQ,CAC3BoD,QAAQC,IAAI,+BACZ,IACMyB,EADOpF,eAAeqF,QAAQP,EAAMK,OAAOzG,IAClB4G,MAAM,KAC/BvF,EAAO,CACXvB,MAAO4G,EAAkB,GACzBhH,UAAoC,SAAzBgH,EAAkB,GAC7B1G,GAAIoG,EAAMK,OAAOzG,IAEnBsG,EAAejF,MAEhB,CAACnD,EAAOkI,EAAMK,OAAOzG,KAEtB,6BACE,qCAAWoG,EAAMK,OAAOzG,IACxB,kBAACkG,GAAD,KACE,kBAAC9C,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAKuD,GAAI,IACNR,EACC,kBAAC,EAAD,iBAAUA,EAAV,CAAuBlH,YAAU,KAEjC,oDAKR,kBAAC0D,EAAA,EAAD,CAAQQ,UAAU,wBAChB,kBAAC,IAAD,CAAMd,GAAG,KAAT,wB,kBCpDO,YAAC4C,EAAM2B,GACpB,OAAQA,EAAO1F,MACb,IAAK,WACH,OAAO2F,aAAQ5B,GAAM,SAAC6B,GACpBA,EAAM9I,MAAN,uBAAkB8I,EAAM9I,OAAxB,aAAkC4I,EAAO5I,QACzC8I,EAAM7I,MAAQ6I,EAAM9I,MAAM0D,UAG9B,IAAK,aACH,OAAOmF,aAAQ5B,GAAM,SAAC6B,GACpBA,EAAM9I,MAAN,aAAkB8I,EAAM9I,MAAM+I,QAAO,qBAAGjH,KAAgB8G,EAAO9G,OAC/DgH,EAAM7I,MAAQ6I,EAAM9I,MAAM0D,UAG9B,IAAK,UACH,OAAOmF,aAAQ5B,GAAM,SAAC6B,GACpBA,EAAM9I,MAAN,uBAAkB8I,EAAM9I,OAAxB,CAA+B4I,EAAOzF,OACtC2F,EAAM7I,MAAQ6I,EAAM9I,MAAM0D,UAG9B,IAAK,YACH,OAAOmF,aAAQ5B,GAAM,SAAC6B,GACpBA,EAAM9I,MAAN,aACK8I,EAAM9I,MAAM8H,KAAI,SAAC3E,GAAD,OACjBA,EAAKrB,KAAO8G,EAAOzF,KAAKrB,GAAxB,2BACSqB,GADT,IACe3B,WAAY2B,EAAK3B,YAC5B2B,MAGR2F,EAAM7I,MAAQ6I,EAAM9I,MAAM0D,UAG9B,QACE,OAAOuD,ICjCE,cAAe2B,GAAf,IAAG7I,EAAH,EAAGA,SAAH,MAA2B,CACxCA,SAAUiJ,GAAgBjJ,EAAU6I,KCkBvBK,OAbf,WACE,OACE,kBAAC,EAAD,CAAe1I,aAAcT,EAAoBQ,QAAS4I,IACxD,kBAAC,IAAD,KACE,yBAAK/D,UAAU,OACb,kBAAC,IAAD,CAAOgE,OAAK,EAACC,KAAK,IAAIC,UAAW1C,IACjC,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,aAAaC,UAAWpB,SCFhCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2D,MCXNwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnH,MAAK,SAAAoH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.5175e29b.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\n\nimport todoData from \"./todoData\";\nimport authData from \"./authData\";\n\nexport const StateContext = createContext();\n\nexport const initialGlobalState = {\n  todoData,\n  authData\n};\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","export default {\n  todos: [],\n  count: 0,\n};\n","export default {\n    loggedIn: false,\n    userId: null\n};","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Input, FormGroup, Label, Badge, Spinner } from \"reactstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useStateValue } from \"../state\";\n\nconst CardWrapper = styled.div`\n  justify-content: center;\n  flex: 1 0 42%;\n  margin: 5px;\n  ${({ isTodoPage }) =>\n    !isTodoPage &&\n    `\n    min-height: 25vh;\n    min-width: 12vw;\n  `}\n  border-radius: 1%;\n  padding: 10px 5px;\n  background-color: gray;\n  &:hover {\n    background-color: #daa520;\n  }\n`;\n\nconst CompleteInput = styled(Input)`\n  cursor: pointer;\n  &:hover {\n    border-color: blue;\n  }\n`;\n\nconst CompleteLabel = styled(Label)`\n  cursor: pointer;\n  &:hover {\n    text-decoration: 1px underline blue;\n  }\n`;\n\nconst TodoTitle = styled.h3`\n  cursor: pointer;\n  ${({ completed }) => completed && `text-decoration: line-through;`}\n  &:hover {\n    text-decoration: 2px underline blue;\n  }\n`;\n\nconst TodoBody = styled.p`\n  cursor: pointer;\n`;\n\nconst Todo = ({ isTodoPage = false, title, body, id, completed, index }) => {\n  const [loading, setLoading] = React.useState(false);\n  const [, dispatch] = useStateValue();\n  let history = useHistory();\n\n  const toggleCompleted = async (id, title, completed) => {\n    setLoading(true);\n    const response = await fetch(\"/todos\", {\n      method: \"PUT\",\n      body: JSON.stringify({ id, title, completed, userId: 1 }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    }).then((r) => r.json());\n    dispatch({\n      type: \"patchTodo\",\n      todo: response.todo,\n    });\n    sessionStorage.setItem(id, title + \"/\" + !completed);\n    setLoading(false);\n  };\n\n  const displayTodoTitle = (extended) => {\n    if (!title) {\n      return \"Untiled note\";\n    }\n    if (extended) {\n      return title;\n    }\n    let renderIndex = \"\";\n    if (index && !isTodoPage) {\n      renderIndex += index + 1 + \". \";\n    }\n    let titleRest = \"\";\n    if (title.length > 16 && !isTodoPage) {\n      titleRest += title.slice(1, 16) + \"...\";\n    } else {\n      titleRest = title.slice(1);\n    }\n    return renderIndex + title.slice(0, 1).toUpperCase() + titleRest;\n  };\n\n  const displayTodoBody = () => {\n    if (!body) {\n      return displayTodoTitle(true);\n    }\n    if (isTodoPage) {\n      return body;\n    }\n    if (body.length > 14) {\n      return body.slice(0, 1) + body.slice(1, 14) + \"...\";\n    }\n    return body;\n  };\n\n  return (\n    <CardWrapper isTodoPage={isTodoPage}>\n      <TodoTitle\n        onClick={() => history.push(`/ideas/${id}`)}\n        completed={completed}\n      >\n        {displayTodoTitle()}\n      </TodoTitle>\n      <TodoBody onClick={() => history.push(`/ideas/${id}`)}>\n        {displayTodoBody()}\n      </TodoBody>\n      <div>\n        <FormGroup>\n          <CompleteInput\n            id=\"completedCheckbox\"\n            name=\"completedCheckbox\"\n            type=\"checkbox\"\n            checked={completed}\n            disabled={loading}\n            onChange={() => toggleCompleted(id, title, completed)}\n          />\n          <CompleteLabel\n            onClick={() => toggleCompleted(id, title, completed)}\n            htmlFor=\"completedCheckbox\"\n          >\n            Complete\n          </CompleteLabel>\n        </FormGroup>\n      </div>\n      <div>\n        <Link to={`/ideas/${id}`}>\n          <Badge color=\"success\">ID #{id}</Badge>\n        </Link>\n      </div>\n      <div>\n        {loading && (\n          <div>\n            <Spinner animation=\"grow\" />\n            <p>Loading...</p>\n          </div>\n        )}\n      </div>\n    </CardWrapper>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport {\n  FormGroup,\n  Input,\n  Label,\n  Row,\n  Col,\n  Button,\n  Popover,\n  PopoverHeader,\n  Spinner,\n} from \"reactstrap\";\nimport { useStateValue } from \"../state\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled(Button)`\n  &:hover {\n    background-color: #daa520;\n    color: black;\n  }\n`;\n\nconst NewTodoForm = () => {\n  const initialFormState = {\n    title: \"My Notes\",\n    body: \"Go code, learn better ways, review, etc\",\n    userId: 1,\n  };\n  const [formSearch, setFormSearch] = React.useState(initialFormState);\n  const [loading, setLoading] = React.useState(false);\n  const [popoverOpen, setPopoverOpen] = React.useState(false);\n\n  const [, dispatch] = useStateValue();\n\n  const createTodo = async () => {\n    const { title, body } = formSearch;\n    if (!title) {\n      return setPopoverOpen(true);\n    }\n    setLoading(true);\n    const response = await fetch(\"/todos\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n      body: JSON.stringify({ title, body, userId: 1 }),\n    }).then((r) => r.json());\n    if (response.todo) {\n      dispatch({\n        type: \"addTodo\",\n        todo: response.todo,\n      });\n      sessionStorage.setItem(response.todo.id, title + \"/false\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div>\n      <Row className=\"mt-2\">\n        <Col>\n          <Label htmlFor=\"title\">Title</Label>\n          <Input\n            value={formSearch.title}\n            onChange={(e) =>\n              setFormSearch({ ...formSearch, title: e.target.value })\n            }\n            name=\"title\"\n            id=\"title\"\n          ></Input>\n        </Col>\n      </Row>\n      <FormGroup>\n        <Label htmlFor=\"notes\">Notes</Label>\n        <Input\n          type=\"textarea\"\n          value={formSearch.body}\n          onChange={(e) =>\n            setFormSearch({ ...formSearch, body: e.target.value })\n          }\n          name=\"notes\"\n          id=\"notes\"\n          placeholder=\"Today I went hiking and it was very beautiful despite cold weather..\"\n        />\n      </FormGroup>\n      <StyledButton\n        onClick={createTodo}\n        disabled={loading}\n        id=\"Popover1\"\n        type=\"button\"\n      >\n        Add note\n      </StyledButton>\n      {loading && (\n        <div>\n          <Spinner />\n        </div>\n      )}\n      {popoverOpen && (\n        <Popover\n          placement=\"bottom\"\n          isOpen={popoverOpen}\n          target=\"Popover1\"\n          toggle={() => setPopoverOpen(!popoverOpen)}\n        >\n          <PopoverHeader>Preencha todos os campos!</PopoverHeader>\n        </Popover>\n      )}\n    </div>\n  );\n};\n\nexport default NewTodoForm;\n","import React from \"react\";\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\n\nconst PaginationComponent = ({ next, prev, currentPage }) => {\n  return (\n    <div>\n    <Pagination\n      style={{ justifyContent: \"center\", marginTop: \"1rem\" }}\n      aria-label=\"Page navigation\"\n    >\n      <PaginationItem>\n        <PaginationLink previous onClick={() => prev()} />\n      </PaginationItem>\n\n      <PaginationItem>\n        <PaginationLink next onClick={() => next()} />\n      </PaginationItem>\n    </Pagination>\n    <div>Page {currentPage + 1}</div>\n    </div>\n  );\n};\n\nexport default PaginationComponent;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Container, Badge, Fade, PopoverHeader, Popover } from \"reactstrap\";\nimport Todo from \"../components/Todo\";\nimport NewTodoForm from \"../components/NewTodoForm\";\nimport PaginationComponent from \"../components/PaginationComponent\";\nimport \"../App.css\";\nimport { useStateValue } from \"../state\";\n\nconst TodosSection = styled.section`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 1rem;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction HomePage() {\n  const [currentPage, setCurrentPage] = React.useState(0);\n  const [popoverOpen, setPopoverOpen] = React.useState(false);\n\n  const [\n    {\n      todoData: { todos, count },\n    },\n    dispatch,\n  ] = useStateValue();\n\n  let limitPerPage = 6;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(\"Fetching data from server...\");\n      const data = await fetch(\"/todos\").then((res) => res.json());\n      if (data && data.todos && data.todos.length) {\n        const todos = data.todos.slice(0, 5); // Take only 5 todos from response data\n        todos.forEach((el) =>\n          sessionStorage.setItem(el.id, `${el.title}/${el.completed}`)\n        );\n        dispatch({\n          type: \"setTodos\",\n          todos,\n        });\n      }\n    };\n    if (!count) {\n      fetchData();\n    }\n  }, [count, dispatch]);\n\n  const handleNextPage = () =>\n    currentPage + 1 >= Math.ceil(count / limitPerPage)\n      ? alert(\"This is the last page.\")\n      : setCurrentPage(currentPage + 1);\n\n  const handlePrevPage = () =>\n    currentPage === 0\n      ? alert(\"This is the first page.\")\n      : setCurrentPage(currentPage - 1);\n\n  let offset = currentPage * limitPerPage;\n  return (\n    <Container className=\"App\">\n      <Fade timeout={150}>\n        <h1 className=\"mt-1\">\n          <Badge color=\"primary\">Note Taking App</Badge>\n        </h1>\n        <Badge className=\"mr-3\" color=\"secondary\">\n          Write down anything you have in mind\n        </Badge>\n        <Badge\n          onMouseEnter={() => setPopoverOpen(true)}\n          onMouseOut={() => setPopoverOpen(false)}\n          id=\"Popover1\"\n          color=\"info\"\n        >\n          {count}\n        </Badge>\n        {popoverOpen && (\n          <Popover\n            placement=\"bottom\"\n            isOpen={popoverOpen}\n            target=\"Popover1\"\n            toggle={() => setPopoverOpen(!popoverOpen)}\n          >\n            <PopoverHeader>\n              {count} ideas. Click on any to see it in details.\n            </PopoverHeader>\n          </Popover>\n        )}\n      </Fade>\n      <Fade timeout={1000}>\n        {\" \"}\n        <NewTodoForm />\n      </Fade>\n\n      {count > limitPerPage && (\n        <PaginationComponent\n          next={() => handleNextPage()}\n          prev={() => handlePrevPage()}\n          currentPage={+currentPage}\n        />\n      )}\n      <Fade timeout={1800}>\n        <TodosSection>\n          {todos ? (\n            todos.map(\n              ({ id, title, completed, body }, index) =>\n                index >= offset && // Pagination\n                index < offset + limitPerPage && (\n                  <Todo\n                    key={index}\n                    id={id}\n                    title={title}\n                    body={body}\n                    completed={completed}\n                    index={index}\n                  />\n                )\n            )\n          ) : (\n            <p>Loading..</p>\n          )}\n        </TodosSection>\n      </Fade>\n    </Container>\n  );\n}\n\nexport default HomePage;\n","import React, { useState, useEffect } from \"react\";\nimport { useStateValue } from \"../state\";\nimport Todo from \"../components/Todo\";\nimport { Row, Col, Button } from \"reactstrap\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst ContentWrapper = styled.div`\n  justify-content: center;\n  align-items: center;\n  padding: auto;\n  display: flex;\n`;\n\nconst IdeaPage = ({ match }) => {\n  const [\n    {\n      todoData: { todos },\n    },\n  ] = useStateValue();\n\n  const [currentTodo, setCurrentTodo] = useState(null);\n\n  useEffect(() => {\n    if (todos && todos.length) {\n      setCurrentTodo(todos.find(({ id }) => id.toString() === match.params.id));\n    }\n    if (!todos || !todos.length) {\n      console.log(\"Searching session storage..\");\n      const data = sessionStorage.getItem(match.params.id);\n      const titleAndCompleted = data.split(\"/\");\n      const todo = {\n        title: titleAndCompleted[0],\n        completed: titleAndCompleted[1] === \"true\",\n        id: match.params.id,\n      };\n      setCurrentTodo(todo);\n    }\n  }, [todos, match.params.id]);\n  return (\n    <div>\n      <h1>Note #{match.params.id}</h1>\n      <ContentWrapper>\n        <Row>\n          <Col xs={12}>\n            {currentTodo ? (\n              <Todo {...currentTodo} isTodoPage />\n            ) : (\n              <p>Note not found! :/</p>\n            )}\n          </Col>\n        </Row>\n      </ContentWrapper>\n      <Button className=\"btn btn-warning mt-4\">\n        <Link to=\"/\">Back to Main Page</Link>\n      </Button>\n    </div>\n  );\n};\n\nexport default IdeaPage;\n","import produce from \"immer\";\n\nexport default (data, action) => {\n  switch (action.type) {\n    case \"setTodos\":\n      return produce(data, (draft) => {\n        draft.todos = [...draft.todos, ...action.todos];\n        draft.count = draft.todos.length;\n      });\n\n    case \"removeTodo\":\n      return produce(data, (draft) => {\n        draft.todos = [...draft.todos.filter(({ id }) => id !== action.id)];\n        draft.count = draft.todos.length;\n      });\n\n    case \"addTodo\":\n      return produce(data, (draft) => {\n        draft.todos = [...draft.todos, action.todo];\n        draft.count = draft.todos.length;\n      });\n\n    case \"patchTodo\":\n      return produce(data, (draft) => {\n        draft.todos = [\n          ...draft.todos.map((todo) =>\n            todo.id === action.todo.id\n              ? { ...todo, completed: !todo.completed }\n              : todo\n          ),\n        ];\n        draft.count = draft.todos.length;\n      });\n\n    default:\n      return data;\n  }\n};\n","import todoDataReducer from \"./todoDataReducer\";\n\nexport default ({ todoData }, action) => ({\n  todoData: todoDataReducer(todoData, action),\n});\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport IdeaPage from \"./pages/IdeaPage\";\nimport { StateProvider, initialGlobalState } from \"./state\";\nimport mainReducer from \"./state/reducers\";\n\nfunction App() {\n  return (\n    <StateProvider initialState={initialGlobalState} reducer={mainReducer}>\n      <BrowserRouter>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/ideas/:id\" component={IdeaPage} />\n        </div>\n      </BrowserRouter>\n    </StateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}